name: default

on:
  push:
    branches-ignore: ["main", "production"]
  pull_request:
    branches: ["main"]
    types:
    - closed
  workflow_dispatch:

jobs:
  lint:
    runs-on: ["self-hosted", "X64"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"
    - name: Install dependencies
      env:
        REQUIREMENTS_FILE: lint
      run: |
        python -m pip install --upgrade pip setuptools wheel
        set -e
        python -m pip install -U -r requirements/${REQUIREMENTS_FILE}.txt
    - name: Lint with flake8
      run: |
        python -m flake8 src tests

  typecheck:
    runs-on: ["self-hosted", "X64"]
    needs: lint
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"
    - name: Install dependencies
      env:
        REQUIREMENTS_FILE: typecheck
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install -U -r requirements/${REQUIREMENTS_FILE}.txt
    - name: Type check with mypy
      run: |
        python -m mypy --no-color-output src tests

  test:
    runs-on: ["self-hosted", "X64"]
    needs: [lint, typecheck]
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}
        volumes:
        - ./init/:/docker-entrypoint-initdb.d/
        ports:
        - 65432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"
    - name: Install dependencies
      env:
        REQUIREMENTS_FILE: test
      run: |
        python -m pip install --upgrade pip setuptools wheel
        python -m pip install -U -r requirements/${REQUIREMENTS_FILE}.txt
    - name: Create pytest.ini
      run: |
        echo "[pytest]" > pytest.ini
        echo "env = " >> pytest.ini
        echo "    DATABASE_URL=${{ secrets.DATABASE_URL }}" >> pytest.ini
        echo "    REDIS_URL=${{ secrets.REDIS_URL }}" >> pytest.ini
        echo "    JWT_ALGORITHM=HS256=" >> pytest.ini
        echo "    JWT_SECRET_KEY=${{ secrets.JWT_SECRET }}" >> pytest.ini
        echo "    JWT_EXPIRATION=21000" >> pytest.ini
        echo "    SITE_DOMAIN=127.0.0.1" >> pytest.ini
        echo "    SECURE_COOKIES=false" >> pytest.ini
        echo "    ENVIRONMENT=testing" >> pytest.ini
        echo "    CORS_HEADERS=[\"*\"]" >> pytest.ini
        echo "    CORS_ORIGINS=[\"http://localhost:3000\"]" >> pytest.ini
    - name: Create .env
      run: |
        echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
        echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> .env
        echo "JWT_ALGORITHM=HS256=" >> .env
        echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET }}" >> .env
        echo "JWT_EXPIRATION=21000" >> .env
        echo "SITE_DOMAIN=127.0.0.1" >> .env
        echo "ENVIRONMENT=testing" >> .env
        echo "CORS_HEADERS=[\"*\"]" >> .env
        echo "CORS_ORIGINS=[\"http://localhost:3000\", \"https://map.hyuabot.app\"]" >> .env
        echo "POSTGRES_USER=${{ secrets.DB_USER }}" >> .env
        echo "POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
        echo "POSTGRES_DB=${{ secrets.DB_NAME }}" >> .env
        echo "POSTGRES_HOST=localhost" >> .env
        echo "POSTGRES_PORT=65432" >> .env
    - name: Test with pytest
      env:
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_NAME: ${{ secrets.DB_NAME }}
      run: |
        python -m pytest -m 'not integration' -v --cov=src
